type AddCommentResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  AddComment(postId: Int!, parentCommentId: Int, body: String!, level: Int!): AddCommentResponse!
  DeleteComment(commentId: Int!): DeleteCommentResponse!
  EditComment(commentId: Int!, body: String!): EditCommentResponse!
  SendClap(postId: Int!): SendClapResponse!
  UnClap(postId: Int!): SendClapResponse!
  AddPost(category: Int!, title: String!, source: String, tags: [String], body: String!): AddPostResponse!
  DeletePost(postId: Int!): DeletePostResponse!
  EditPost(postId: Int!, category: Int!, title: String!, source: String, tags: [String], body: String!): EditPostResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(email: String!, password: String!, nickName: String!, gender: String!, birthday: String!): EmailSignUpResponse!
  FacebookConnect(firstName: String!, lastName: String!, nickName: String!, email: String, fbId: String!): FacebookConnectResponse!
  GoogleConnect(firstName: String!, lastName: String!, nickName: String!, email: String, profilePhoto: String, googleId: String!): GoogleConnectResponse!
}

type DeleteCommentResponse {
  ok: Boolean
  error: String
}

type EditCommentResponse {
  ok: Boolean!
  error: String
}

type GetCommentsByPostIdResponse {
  ok: Boolean!
  error: String
  comments: [Comment]
}

type Query {
  GetCommentsByPostId(postId: Int!): GetCommentsByPostIdResponse!
  GetPostById(postId: Int!): GetPostByIdResponse!
  GetPostsByPage(page: Int!): GetPostsByPageResponse!
  GetMyProfile: GetMyProfileResponse!
}

type Comment {
  id: Int!
  body: String!
  userId: Int
  user: User!
  postId: Int
  post: Post!
  parentComment: Comment
  childrenComments: [Comment]
  level: Int!
  createdAt: String!
  updatedAt: String
}

type SendClapResponse {
  ok: Boolean!
  error: String
}

type Like {
  id: Int!
  senderId: Int
  sender: User!
  receiverId: Int
  receiver: User!
  postId: Int
  post: Post
  createdAt: String!
  updatedAt: String
}

type UnClapResponse {
  ok: Boolean!
  error: String
}

type AddPostResponse {
  ok: Boolean!
  error: String
  postId: Int
}

type DeletePostResponse {
  ok: Boolean!
  error: String
}

type EditPostResponse {
  ok: Boolean!
  error: String
}

type GetPostByIdResponse {
  ok: Boolean!
  error: String
  post: Post
  isLiked: Boolean
  isMine: Boolean
}

type GetPostsByPageResponse {
  ok: Boolean!
  error: String
  posts: [Post]!
  maxPage: Int!
}

type Post {
  id: Int!
  category: Int!
  title: String!
  source: String!
  body: String!
  userId: Int!
  user: User!
  view: Int!
  tags: [String]
  createdAt: String!
  updatedAt: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
  token: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type GoogleConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type User {
  id: Int!
  email: String
  verifiedEmail: Boolean!
  nickName: String!
  birthday: String
  gender: String
  password: String
  profilePhoto: String
  fbId: String
  googleId: String
  posts: [Post]
  likesAsSender: [Like]
  likesAsReceiver: [Like]
  likesAsReceiverCount: Int
  comments: [Comment]
  cinePoint: Int!
  following: [User]
  followers: [User]
  followersCount: Int
  followingCount: Int
  createdAt: String!
  updatedAt: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}
